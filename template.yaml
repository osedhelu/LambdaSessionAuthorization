AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  sessionProject

  Sample SAM Template for sessionProject

Parameters:
  Stage:
    Type: String
    Default: staging
    AllowedValues:
      - local
      - staging
      - prod
  NAMEBUCKENT:
    Type: String
    Default: SessionDAnielapps




Globals:
  Function:
    Timeout: 300
    MemorySize: 1024
    Runtime: nodejs8.10
    Environment:
     Variables:
      PRIVATE_KEY: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCezqIzLGQbTJiy8mSWl7ifYfM1PUZsQoRdiZawwR7M9+XmGPxQR5VqOd3ACWHRy7Ffdfjz16nm2XILLZeVpXWfxLq3tPzXlG+tmSTt9lxsqHZC5pH3CLq2/PHVLXQmv97psI1ddGmzhDCzB0H/7imWhKPciMbz4J2GSCC5njGkp3BhbLBl7Id5vx/dd8afRl5mzf/JZs07dM4F5fwryzLyiDxgAPId71/ocd/Q5vBpQiAtisN/vBJrzaewbI7iQ5P1ze5mQ0ukfiC64JoHMcyTrMY2yd/0zACcyWQSD3c1DExVb2wWquSrrQSnhGtNp8Q8J2zrnZqxoD6fLejU887/
'
      STAGE_ENV: !Ref Stage
      PROD_DATABASE_URL: 'mongodb+srv://danielapps:danielapps@cluster0-mpguq.mongodb.net/test?retryWrites=true&w=majority'
      STAGING_DATABASE_URL: 'mongodb+srv://danielapps:danielapps@cluster0-mpguq.mongodb.net/test?retryWrites=true&w=majority'
      # ID_API: "1glnmvn2g7"


      
Resources:
  MyApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Stage
      Auth:
        DefaultAuthorizer: sessionAuthorice
        Authorizers:
          sessionAuthorice:
            FunctionArn: !GetAtt Authorizationfunction.Arn
            
  saveUsers:
    Type: AWS::Serverless::Function
    Properties:
      # Policies:
      #  - AWSLambdaExecute # Managed Policy
      #  - Version: '2012-10-17' # Policy Document
      #    Statement:
      #      - Effect: Allow
      #        Action:
      #          - s3:GetObject
      #          - s3:GetObjectACL
      #        Resource: !Sub 'arn:aws:s3:::${NAMEBUCKENT}/*'
      CodeUri: session/ 
      Handler: app.handler
      Events:
         addUsers:
          Type: Api 
          Properties:
            Path: /session/signup
            Method: post
            RestApiId: !Ref MyApi
         GetUsers:
          Type: Api 
          Properties:
            Path: /session/signup
            Method: get
            RestApiId: !Ref MyApi


  loginUsers:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: session/
      Handler: app.login
      Events:
        GetRoot:
          Type: Api
          Properties:
            Path: /session/login
            Method: post
            RestApiId: !Ref MyApi
            Auth:
              Authorizer: NONE
            
                          
  Authorizationfunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: session/
      Handler: auth.auth
      # Environment:
        # Variables:
          # URLEXECUTE: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:1glnmvn2g7/staging/POST/session/signup'
 
      # CidrBlock: !Select [ 0, !Ref DbSubnetIpBlocks ]
Outputs:
    ARN1:
      Description: "API ID"
      Value: !Sub 'arn:${AWS::Partition}:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${AWS::StackId}'  